{"ast":null,"code":"/*\n * Copyright (c) 2022, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15]\n};\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1]\n};\n\n// prettier-ignore\nconst ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n\n// prettier-ignore\nconst RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\nconst SHIFTS = {\n  p: 0,\n  n: 1,\n  b: 2,\n  r: 3,\n  q: 4,\n  k: 5\n};\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64\n};\nconst RANK_1 = 7;\nconst RANK_2 = 6;\nconst RANK_3 = 5;\nconst RANK_4 = 4;\nconst RANK_5 = 3;\nconst RANK_6 = 2;\nconst RANK_7 = 1;\nconst RANK_8 = 0;\n\n// prettier-ignore\nconst SQUARE_MAP = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nconst ROOKS = {\n  w: [{\n    square: SQUARE_MAP.a1,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: SQUARE_MAP.h1,\n    flag: BITS.KSIDE_CASTLE\n  }],\n  b: [{\n    square: SQUARE_MAP.a8,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: SQUARE_MAP.h8,\n    flag: BITS.KSIDE_CASTLE\n  }]\n};\nconst PARSER_STRICT = 0;\nconst PARSER_SLOPPY = 1;\n\n/* this function is used to uniquely identify ambiguous moves */\nfunction get_disambiguator(move, moves) {\n  var from = move.from;\n  var to = move.to;\n  var piece = move.piece;\n  var ambiguities = 0;\n  var same_rank = 0;\n  var same_file = 0;\n  for (var i = 0, len = moves.length; i < len; i++) {\n    var ambig_from = moves[i].from;\n    var ambig_to = moves[i].to;\n    var ambig_piece = moves[i].piece;\n\n    /* if a move of the same piece type ends on the same to square, we'll\n     * need to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n      ambiguities++;\n      if (rank(from) === rank(ambig_from)) {\n        same_rank++;\n      }\n      if (file(from) === file(ambig_from)) {\n        same_file++;\n      }\n    }\n  }\n  if (ambiguities > 0) {\n    /* if there exists a similar moving piece on the same rank and file as\n     * the move in question, use the square as the disambiguator\n     */\n    if (same_rank > 0 && same_file > 0) {\n      return algebraic(from);\n    } else if (same_file > 0) {\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1);\n    } else {\n      /* else use the file symbol */\n      return algebraic(from).charAt(0);\n    }\n  }\n  return '';\n}\nfunction infer_piece_type(san) {\n  var piece_type = san.charAt(0);\n  if (piece_type >= 'a' && piece_type <= 'h') {\n    var matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n    if (matches) {\n      return undefined;\n    }\n    return PAWN;\n  }\n  piece_type = piece_type.toLowerCase();\n  if (piece_type === 'o') {\n    return KING;\n  }\n  return piece_type;\n}\n\n// parses all of the decorators out of a SAN string\nfunction stripped_san(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\n\n/*****************************************************************************\n * UTILITY FUNCTIONS\n ****************************************************************************/\nfunction rank(i) {\n  return i >> 4;\n}\nfunction file(i) {\n  return i & 15;\n}\nfunction algebraic(i) {\n  var f = file(i),\n    r = rank(i);\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n}\nfunction swap_color(c) {\n  return c === WHITE ? BLACK : WHITE;\n}\nfunction is_digit(c) {\n  return '0123456789'.indexOf(c) !== -1;\n}\nfunction clone(obj) {\n  var dupe = obj instanceof Array ? [] : {};\n  for (var property in obj) {\n    if (typeof property === 'object') {\n      dupe[property] = clone(obj[property]);\n    } else {\n      dupe[property] = obj[property];\n    }\n  }\n  return dupe;\n}\nfunction trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/***************************************************************************\n * PUBLIC CONSTANTS\n **************************************************************************/\n\nexport const BLACK = 'b';\nexport const WHITE = 'w';\nexport const EMPTY = -1;\nexport const PAWN = 'p';\nexport const KNIGHT = 'n';\nexport const BISHOP = 'b';\nexport const ROOK = 'r';\nexport const QUEEN = 'q';\nexport const KING = 'k';\nexport const SQUARES = function () {\n  /* from the ECMA-262 spec (section 12.6.4):\n   * \"The mechanics of enumerating the properties ... is\n   * implementation dependent\"\n   * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n   * ordered correctly\n   */\n  var keys = [];\n  for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n    if (i & 0x88) {\n      i += 7;\n      continue;\n    }\n    keys.push(algebraic(i));\n  }\n  return keys;\n}();\nexport const FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q'\n};\nexport const Chess = function (fen) {\n  var board = new Array(128);\n  var kings = {\n    w: EMPTY,\n    b: EMPTY\n  };\n  var turn = WHITE;\n  var castling = {\n    w: 0,\n    b: 0\n  };\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var history = [];\n  var header = {};\n  var comments = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION);\n  } else {\n    load(fen);\n  }\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false;\n    }\n    board = new Array(128);\n    kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    turn = WHITE;\n    castling = {\n      w: 0,\n      b: 0\n    };\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    history = [];\n    if (!keep_headers) header = {};\n    comments = {};\n    update_setup(generate_fen());\n  }\n  function prune_comments() {\n    var reversed_history = [];\n    var current_comments = {};\n    var copy_comment = function (fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen];\n      }\n    };\n    while (history.length > 0) {\n      reversed_history.push(undo_move());\n    }\n    copy_comment(generate_fen());\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop());\n      copy_comment(generate_fen());\n    }\n    comments = current_comments;\n  }\n  function reset() {\n    load(DEFAULT_POSITION);\n  }\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false;\n    }\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n    if (!validate_fen(fen).valid) {\n      return false;\n    }\n    clear(keep_headers);\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n      if (piece === '/') {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK;\n        put({\n          type: piece.toLowerCase(),\n          color: color\n        }, algebraic(square));\n        square++;\n      }\n    }\n    turn = tokens[1];\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARE_MAP[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n    update_setup(generate_fen());\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square'\n    };\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return {\n        valid: false,\n        error_number: 1,\n        error: errors[1]\n      };\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(parseInt(tokens[5])) || parseInt(tokens[5], 10) <= 0) {\n      return {\n        valid: false,\n        error_number: 2,\n        error: errors[2]\n      };\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(parseInt(tokens[4])) || parseInt(tokens[4], 10) < 0) {\n      return {\n        valid: false,\n        error_number: 3,\n        error: errors[3]\n      };\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return {\n        valid: false,\n        error_number: 4,\n        error: errors[4]\n      };\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return {\n        valid: false,\n        error_number: 5,\n        error: errors[5]\n      };\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return {\n        valid: false,\n        error_number: 6,\n        error: errors[6]\n      };\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n      return {\n        valid: false,\n        error_number: 7,\n        error: errors[7]\n      };\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return {\n              valid: false,\n              error_number: 8,\n              error: errors[8]\n            };\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return {\n              valid: false,\n              error_number: 9,\n              error: errors[9]\n            };\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return {\n          valid: false,\n          error_number: 10,\n          error: errors[10]\n        };\n      }\n    }\n    if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n      return {\n        valid: false,\n        error_number: 11,\n        error: errors[11]\n      };\n    }\n\n    /* everything's okay! */\n    return {\n      valid: true,\n      error_number: 0,\n      error: errors[0]\n    };\n  }\n  function generate_fen() {\n    var empty = 0;\n    var fen = '';\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      if (board[i] == null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = board[i].color;\n        var piece = board[i].type;\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      }\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n        if (i !== SQUARE_MAP.h1) {\n          fen += '/';\n        }\n        empty = 0;\n        i += 8;\n      }\n    }\n    var cflags = '';\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K';\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q';\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k';\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q';\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-';\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square);\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ');\n  }\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return;\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1';\n      header['FEN'] = fen;\n    } else {\n      delete header['SetUp'];\n      delete header['FEN'];\n    }\n  }\n  function get(square) {\n    var piece = board[SQUARE_MAP[square]];\n    return piece ? {\n      type: piece.type,\n      color: piece.color\n    } : null;\n  }\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARE_MAP)) {\n      return false;\n    }\n    var sq = SQUARE_MAP[square];\n\n    /* don't let the user place more than one king */\n    if (piece.type == KING && !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n      return false;\n    }\n    board[sq] = {\n      type: piece.type,\n      color: piece.color\n    };\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n    update_setup(generate_fen());\n    return true;\n  }\n  function remove(square) {\n    var piece = get(square);\n    board[SQUARE_MAP[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n    update_setup(generate_fen());\n    return piece;\n  }\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    };\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN;\n    }\n    return move;\n  }\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (board[from].type === PAWN && (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]));\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags));\n      }\n    }\n    var moves = [];\n    var us = turn;\n    var them = swap_color(us);\n    var second_rank = {\n      b: RANK_7,\n      w: RANK_2\n    };\n    var first_sq = SQUARE_MAP.a8;\n    var last_sq = SQUARE_MAP.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal = typeof options !== 'undefined' && 'legal' in options ? options.legal : true;\n    var piece_type = typeof options !== 'undefined' && 'piece' in options && typeof options.piece === 'string' ? options.piece.toLowerCase() : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARE_MAP) {\n        first_sq = last_sq = SQUARE_MAP[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      var piece = board[i];\n      if (piece == null || piece.color !== us) {\n        continue;\n      }\n      if (piece.type === PAWN && (piece_type === true || piece_type === PAWN)) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else if (piece_type === true || piece_type === piece.type) {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (board[square].color === us) break;\n              add_move(board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (piece_type === true || piece_type === KING) {\n      if (!single_square || last_sq === kings[us]) {\n        /* king-side castling */\n        if (castling[us] & BITS.KSIDE_CASTLE) {\n          var castling_from = kings[us];\n          var castling_to = castling_from + 2;\n          if (board[castling_from + 1] == null && board[castling_to] == null && !attacked(them, kings[us]) && !attacked(them, castling_from + 1) && !attacked(them, castling_to)) {\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);\n          }\n        }\n\n        /* queen-side castling */\n        if (castling[us] & BITS.QSIDE_CASTLE) {\n          var castling_from = kings[us];\n          var castling_to = castling_from - 2;\n          if (board[castling_from - 1] == null && board[castling_from - 2] == null && board[castling_from - 3] == null && !attacked(them, kings[us]) && !attacked(them, castling_from - 1) && !attacked(them, castling_to)) {\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);\n          }\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, moves) {\n    var output = '';\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      if (move.piece !== PAWN) {\n        var disambiguator = get_disambiguator(move, moves);\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n      output += algebraic(move.to);\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n    make_move(move);\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    undo_move();\n    return output;\n  }\n  function attacked(color, square) {\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue;\n      var piece = board[i];\n      var difference = i - square;\n      var index = difference + 119;\n      if (ATTACKS[index] & 1 << SHIFTS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true;\n        var offset = RAYS[index];\n        var j = i + offset;\n        var blocked = false;\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n        if (!blocked) return true;\n      }\n    }\n    return false;\n  }\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n  function in_check() {\n    return king_attacked(turn);\n  }\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0;\n  }\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0;\n  }\n  function insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      var piece = board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true;\n    } else if (/* k vs. kn .... or .... k vs. kb */\n    num_pieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n      return true;\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0;\n      var len = bishops.length;\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ');\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n    return repetition;\n  }\n  function push(move) {\n    history.push({\n      move: move,\n      kings: {\n        b: kings.b,\n        w: kings.w\n      },\n      turn: turn,\n      castling: {\n        b: castling.b,\n        w: castling.w\n      },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    });\n  }\n  function make_move(move) {\n    var us = turn;\n    var them = swap_color(us);\n    push(move);\n    board[move.to] = board[move.from];\n    board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null;\n      } else {\n        board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = {\n        type: move.promotion,\n        color: us\n      };\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = '';\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && castling[us] & ROOKS[us][i].flag) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && castling[them] & ROOKS[them][i].flag) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n    if (turn === BLACK) {\n      move_number++;\n    }\n    turn = swap_color(turn);\n  }\n  function undo_move() {\n    var old = history.pop();\n    if (old == null) {\n      return null;\n    }\n    var move = old.move;\n    kings = old.kings;\n    turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n    var us = turn;\n    var them = swap_color(turn);\n    board[move.from] = board[move.to];\n    board[move.from].type = move.piece; // to undo any promotions\n    board[move.to] = null;\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = {\n        type: move.captured,\n        color: them\n      };\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      board[index] = {\n        type: PAWN,\n        color: them\n      };\n    }\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n      board[castling_to] = board[castling_from];\n      board[castling_from] = null;\n    }\n    return move;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    var clean_move = stripped_san(move);\n\n    // the move parsers is a 2-step state\n    for (var parser = 0; parser < 2; parser++) {\n      if (parser == PARSER_SLOPPY) {\n        // only run the sloppy parse if explicitly requested\n        if (!sloppy) {\n          return null;\n        }\n\n        // The sloppy parser allows the user to parse non-standard chess\n        // notations. This parser is opt-in (by specifying the\n        // '{ sloppy: true }' setting) and is only run after the Standard\n        // Algebraic Notation (SAN) parser has failed.\n        //\n        // When running the sloppy parser, we'll run a regex to grab the piece,\n        // the to/from square, and an optional promotion piece. This regex will\n        // parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n        // f7f8q, b1c3\n\n        // NOTE: Some positions and moves may be ambiguous when using the\n        // sloppy parser. For example, in this position:\n        // 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1, the move b1c3 may be interpreted\n        // as Nc3 or B1c3 (a disambiguated bishop move). In these cases, the\n        // sloppy parser will default to the most most basic interpretation\n        // (which is b1c3 parsing to Nc3).\n\n        // FIXME: these var's are hoisted into function scope, this will need\n        // to change when switching to const/let\n\n        var overly_disambiguated = false;\n        var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n          var piece = matches[1];\n          var from = matches[2];\n          var to = matches[3];\n          var promotion = matches[4];\n          if (from.length == 1) {\n            overly_disambiguated = true;\n          }\n        } else {\n          // The [a-h]?[1-8]? portion of the regex below handles moves that may\n          // be overly disambiguated (e.g. Nge7 is unnecessary and non-standard\n          // when there is one legal knight move to e7). In this case, the value\n          // of 'from' variable will be a rank or file, not a square.\n          var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n          if (matches) {\n            var piece = matches[1];\n            var from = matches[2];\n            var to = matches[3];\n            var promotion = matches[4];\n            if (from.length == 1) {\n              var overly_disambiguated = true;\n            }\n          }\n        }\n      }\n      var piece_type = infer_piece_type(clean_move);\n      var moves = generate_moves({\n        legal: true,\n        piece: piece ? piece : piece_type\n      });\n      for (var i = 0, len = moves.length; i < len; i++) {\n        switch (parser) {\n          case PARSER_STRICT:\n            {\n              if (clean_move === stripped_san(move_to_san(moves[i], moves))) {\n                return moves[i];\n              }\n              break;\n            }\n          case PARSER_SLOPPY:\n            {\n              if (matches) {\n                // hand-compare move properties with the results from our sloppy\n                // regex\n                if ((!piece || piece.toLowerCase() == moves[i].piece) && SQUARE_MAP[from] == moves[i].from && SQUARE_MAP[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                  return moves[i];\n                } else if (overly_disambiguated) {\n                  // SPECIAL CASE: we parsed a move string that may have an\n                  // unneeded rank/file disambiguator (e.g. Nge7).  The 'from'\n                  // variable will\n                  var square = algebraic(moves[i].from);\n                  if ((!piece || piece.toLowerCase() == moves[i].piece) && SQUARE_MAP[to] == moves[i].to && (from == square[0] || from == square[1]) && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                  }\n                }\n              }\n            }\n        }\n      }\n    }\n    return null;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, generate_moves({\n      legal: true\n    }));\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n    var flags = '';\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n    return move;\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({\n      legal: false\n    });\n    var nodes = 0;\n    var color = turn;\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n    return nodes;\n  }\n  return {\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function (fen) {\n      return load(fen);\n    },\n    reset: function () {\n      return reset();\n    },\n    moves: function (options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (typeof options !== 'undefined' && 'verbose' in options && options.verbose) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], generate_moves({\n            legal: true\n          })));\n        }\n      }\n      return moves;\n    },\n    in_check: function () {\n      return in_check();\n    },\n    in_checkmate: function () {\n      return in_checkmate();\n    },\n    in_stalemate: function () {\n      return in_stalemate();\n    },\n    in_draw: function () {\n      return half_moves >= 100 || in_stalemate() || insufficient_material() || in_threefold_repetition();\n    },\n    insufficient_material: function () {\n      return insufficient_material();\n    },\n    in_threefold_repetition: function () {\n      return in_threefold_repetition();\n    },\n    game_over: function () {\n      return half_moves >= 100 || in_checkmate() || in_stalemate() || insufficient_material() || in_threefold_repetition();\n    },\n    validate_fen: function (fen) {\n      return validate_fen(fen);\n    },\n    fen: function () {\n      return generate_fen();\n    },\n    board: function () {\n      var output = [],\n        row = [];\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        if (board[i] == null) {\n          row.push(null);\n        } else {\n          row.push({\n            square: algebraic(i),\n            type: board[i].type,\n            color: board[i].color\n          });\n        }\n        if (i + 1 & 0x88) {\n          output.push(row);\n          row = [];\n          i += 8;\n        }\n      }\n      return output;\n    },\n    pgn: function (options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline = typeof options === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\n';\n      var max_width = typeof options === 'object' && typeof options.max_width === 'number' ? options.max_width : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline);\n        header_exists = true;\n      }\n      if (header_exists && history.length) {\n        result.push(newline);\n      }\n      var append_comment = function (move_string) {\n        var comment = comments[generate_fen()];\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : '';\n          move_string = `${move_string}${delimiter}{${comment}}`;\n        }\n        return move_string;\n      };\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n      var moves = [];\n      var move_string = '';\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''));\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string);\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...';\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + '.';\n        }\n        move_string = move_string + ' ' + move_to_san(move, generate_moves({\n          legal: true\n        }));\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string));\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ');\n      }\n      var strip = function () {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop();\n          return true;\n        }\n        return false;\n      };\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function (width, move) {\n        for (var token of move.split(' ')) {\n          if (!token) {\n            continue;\n          }\n          if (width + token.length > max_width) {\n            while (strip()) {\n              width--;\n            }\n            result.push(newline);\n            width = 0;\n          }\n          result.push(token);\n          width += token.length;\n          result.push(' ');\n          width++;\n        }\n        if (strip()) {\n          width--;\n        }\n        return width;\n      };\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i]);\n            continue;\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(' ');\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n      return result.join('');\n    },\n    load_pgn: function (pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n      function parse_pgn_header(header, options) {\n        var newline_char = typeof options === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = '';\n        var value = '';\n        for (var i = 0; i < headers.length; i++) {\n          var regex = /^\\s*\\[([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n          key = headers[i].replace(regex, '$1');\n          value = headers[i].replace(regex, '$2');\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n        return header_obj;\n      }\n\n      // strip whitespace from head/tail of PGN block\n      pgn = pgn.trim();\n      var newline_char = typeof options === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\s*\\r?\\n){2}/\n      var header_regex = new RegExp('^(\\\\[((?:' + mask(newline_char) + ')|.)*\\\\])' + '(?:\\\\s*' + mask(newline_char) + '){2}');\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn) ? header_regex.exec(pgn)[1] : '';\n\n      // Put the board in the starting position\n      reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      var fen = '';\n      for (var key in headers) {\n        // check to see user is including fen (possibly with wrong tag case)\n        if (key.toLowerCase() === 'fen') {\n          fen = headers[key];\n        }\n        set_header([key, headers[key]]);\n      }\n\n      /* sloppy parser should attempt to load a fen tag, even if it's\n       * the wrong case and doesn't include a corresponding [SetUp \"1\"] tag */\n      if (sloppy) {\n        if (fen) {\n          if (!load(fen, true)) {\n            return false;\n          }\n        }\n      } else {\n        /* strict parser - load the starting position indicated by [Setup '1']\n         * and [FEN position] */\n        if (headers['SetUp'] === '1') {\n          if (!('FEN' in headers && load(headers['FEN'], true))) {\n            // second argument to load: don't clear the headers\n            return false;\n          }\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function (string) {\n        return Array.from(string).map(function (c) {\n          /* encodeURI doesn't transform most ASCII characters,\n           * so we handle these ourselves */\n          return c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase();\n        }).join('');\n      };\n      var from_hex = function (string) {\n        return string.length == 0 ? '' : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'));\n      };\n      var encode_comment = function (string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ');\n        return `{${to_hex(string.slice(1, string.length - 1))}}`;\n      };\n      var decode_comment = function (string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1));\n        }\n      };\n\n      /* delete header to get the moves */\n      var ms = pgn.replace(header_string, '').replace(/* encode comments so they don't get deleted below */\n      new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'), function (match, bracket, semicolon) {\n        return bracket !== undefined ? encode_comment(bracket) : ' ' + encode_comment(`{${semicolon.slice(1)}}`);\n      }).replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '');\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '');\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',');\n      var move = '';\n      var result = '';\n      for (var half_move = 0; half_move < moves.length; half_move++) {\n        var comment = decode_comment(moves[half_move]);\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment;\n          continue;\n        }\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* invalid move */\n        if (move == null) {\n          /* was the move an end of game marker */\n          if (TERMINATION_MARKERS.indexOf(moves[half_move]) > -1) {\n            result = moves[half_move];\n          } else {\n            return false;\n          }\n        } else {\n          /* reset the end of game marker if making a valid move */\n          result = '';\n          make_move(move);\n        }\n      }\n\n      /* Per section 8.2.6 of the PGN spec, the Result tag pair must match\n       * match the termination marker. Only do this when headers are present,\n       * but the result tag is missing\n       */\n      if (result && Object.keys(header).length && !header['Result']) {\n        set_header(['Result', result]);\n      }\n      return true;\n    },\n    header: function () {\n      return set_header(arguments);\n    },\n    turn: function () {\n      return turn;\n    },\n    move: function (move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n      var move_obj = null;\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy);\n      } else if (typeof move === 'object') {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (move.from === algebraic(moves[i].from) && move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n      make_move(move_obj);\n      return pretty_move;\n    },\n    undo: function () {\n      var move = undo_move();\n      return move ? make_pretty(move) : null;\n    },\n    clear: function () {\n      return clear();\n    },\n    put: function (piece, square) {\n      return put(piece, square);\n    },\n    get: function (square) {\n      return get(square);\n    },\n    ascii() {\n      var s = '   +------------------------+\\n';\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        /* display the rank */\n        if (file(i) === 0) {\n          s += ' ' + '87654321'[rank(i)] + ' |';\n        }\n\n        /* empty piece */\n        if (board[i] == null) {\n          s += ' . ';\n        } else {\n          var piece = board[i].type;\n          var color = board[i].color;\n          var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n          s += ' ' + symbol + ' ';\n        }\n        if (i + 1 & 0x88) {\n          s += '|\\n';\n          i += 8;\n        }\n      }\n      s += '   +------------------------+\\n';\n      s += '     a  b  c  d  e  f  g  h';\n      return s;\n    },\n    remove: function (square) {\n      return remove(square);\n    },\n    perft: function (depth) {\n      return perft(depth);\n    },\n    square_color: function (square) {\n      if (square in SQUARE_MAP) {\n        var sq_0x88 = SQUARE_MAP[square];\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark';\n      }\n      return null;\n    },\n    history: function (options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose = typeof options !== 'undefined' && 'verbose' in options && options.verbose;\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move, generate_moves({\n            legal: true\n          })));\n        }\n        make_move(move);\n      }\n      return move_history;\n    },\n    get_comment: function () {\n      return comments[generate_fen()];\n    },\n    set_comment: function (comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');\n    },\n    delete_comment: function () {\n      var comment = comments[generate_fen()];\n      delete comments[generate_fen()];\n      return comment;\n    },\n    get_comments: function () {\n      prune_comments();\n      return Object.keys(comments).map(function (fen) {\n        return {\n          fen: fen,\n          comment: comments[fen]\n        };\n      });\n    },\n    delete_comments: function () {\n      prune_comments();\n      return Object.keys(comments).map(function (fen) {\n        var comment = comments[fen];\n        delete comments[fen];\n        return {\n          fen: fen,\n          comment: comment\n        };\n      });\n    }\n  };\n};","map":{"version":3,"names":["SYMBOLS","DEFAULT_POSITION","TERMINATION_MARKERS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","p","BITS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","RANK_1","RANK_2","RANK_3","RANK_4","RANK_5","RANK_6","RANK_7","RANK_8","SQUARE_MAP","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","PARSER_STRICT","PARSER_SLOPPY","get_disambiguator","move","moves","from","to","piece","ambiguities","same_rank","same_file","i","len","length","ambig_from","ambig_to","ambig_piece","rank","file","algebraic","charAt","infer_piece_type","san","piece_type","matches","match","undefined","PAWN","toLowerCase","KING","stripped_san","replace","f","substring","swap_color","c","WHITE","BLACK","is_digit","indexOf","clone","obj","dupe","Array","property","trim","str","EMPTY","KNIGHT","BISHOP","ROOK","QUEEN","SQUARES","keys","push","FLAGS","Chess","fen","board","kings","turn","castling","ep_square","half_moves","move_number","history","header","comments","load","clear","keep_headers","update_setup","generate_fen","prune_comments","reversed_history","current_comments","copy_comment","undo_move","make_move","pop","reset","tokens","split","position","validate_fen","valid","parseInt","color","put","type","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","get","sq","remove","build_move","flags","promotion","captured","generate_moves","options","add_move","pieces","us","them","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_from","castling_to","attacked","legal_moves","king_attacked","move_to_san","output","disambiguator","in_check","in_checkmate","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","old","move_from_san","sloppy","clean_move","parser","overly_disambiguated","make_pretty","ugly_move","perft","depth","nodes","child_nodes","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","append_comment","move_string","comment","delimiter","Result","strip","wrap_comment","width","token","current_width","includes","load_pgn","mask","parse_pgn_header","header_obj","headers","RegExp","key","value","regex","header_regex","header_string","exec","to_hex","string","map","charCodeAt","toString","encodeURIComponent","from_hex","decodeURIComponent","encode_comment","decode_comment","startsWith","endsWith","ms","bracket","semicolon","rav_regex","half_move","Object","arguments","move_obj","pretty_move","undo","ascii","s","symbol","square_color","sq_0x88","move_history","get_comment","set_comment","delete_comment","get_comments","delete_comments"],"sources":["C:/Users/15205/Desktop/chess-game/node_modules/chess.js/chess.js"],"sourcesContent":["/*\n * Copyright (c) 2022, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\nconst RANK_1 = 7\nconst RANK_2 = 6\nconst RANK_3 = 5\nconst RANK_4 = 4\nconst RANK_5 = 3\nconst RANK_6 = 2\nconst RANK_7 = 1\nconst RANK_8 = 0\n\n// prettier-ignore\nconst SQUARE_MAP = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\n\nconst ROOKS = {\n  w: [\n    { square: SQUARE_MAP.a1, flag: BITS.QSIDE_CASTLE },\n    { square: SQUARE_MAP.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: SQUARE_MAP.a8, flag: BITS.QSIDE_CASTLE },\n    { square: SQUARE_MAP.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst PARSER_STRICT = 0\nconst PARSER_SLOPPY = 1\n\n/* this function is used to uniquely identify ambiguous moves */\nfunction get_disambiguator(move, moves) {\n  var from = move.from\n  var to = move.to\n  var piece = move.piece\n\n  var ambiguities = 0\n  var same_rank = 0\n  var same_file = 0\n\n  for (var i = 0, len = moves.length; i < len; i++) {\n    var ambig_from = moves[i].from\n    var ambig_to = moves[i].to\n    var ambig_piece = moves[i].piece\n\n    /* if a move of the same piece type ends on the same to square, we'll\n     * need to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n      ambiguities++\n\n      if (rank(from) === rank(ambig_from)) {\n        same_rank++\n      }\n\n      if (file(from) === file(ambig_from)) {\n        same_file++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    /* if there exists a similar moving piece on the same rank and file as\n     * the move in question, use the square as the disambiguator\n     */\n    if (same_rank > 0 && same_file > 0) {\n      return algebraic(from)\n    } else if (same_file > 0) {\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      /* else use the file symbol */\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction infer_piece_type(san) {\n  var piece_type = san.charAt(0)\n  if (piece_type >= 'a' && piece_type <= 'h') {\n    var matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  piece_type = piece_type.toLowerCase()\n  if (piece_type === 'o') {\n    return KING\n  }\n  return piece_type\n}\n\n// parses all of the decorators out of a SAN string\nfunction stripped_san(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\n/*****************************************************************************\n * UTILITY FUNCTIONS\n ****************************************************************************/\nfunction rank(i) {\n  return i >> 4\n}\n\nfunction file(i) {\n  return i & 15\n}\n\nfunction algebraic(i) {\n  var f = file(i),\n    r = rank(i)\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n}\n\nfunction swap_color(c) {\n  return c === WHITE ? BLACK : WHITE\n}\n\nfunction is_digit(c) {\n  return '0123456789'.indexOf(c) !== -1\n}\n\nfunction clone(obj) {\n  var dupe = obj instanceof Array ? [] : {}\n\n  for (var property in obj) {\n    if (typeof property === 'object') {\n      dupe[property] = clone(obj[property])\n    } else {\n      dupe[property] = obj[property]\n    }\n  }\n\n  return dupe\n}\n\nfunction trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/***************************************************************************\n * PUBLIC CONSTANTS\n **************************************************************************/\n\nexport const BLACK = 'b'\nexport const WHITE = 'w'\n\nexport const EMPTY = -1\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport const SQUARES = (function () {\n  /* from the ECMA-262 spec (section 12.6.4):\n   * \"The mechanics of enumerating the properties ... is\n   * implementation dependent\"\n   * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n   * ordered correctly\n   */\n  var keys = []\n  for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n    if (i & 0x88) {\n      i += 7\n      continue\n    }\n    keys.push(algebraic(i))\n  }\n  return keys\n})()\n\nexport const FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\nexport const Chess = function (fen) {\n  var board = new Array(128)\n  var kings = { w: EMPTY, b: EMPTY }\n  var turn = WHITE\n  var castling = { w: 0, b: 0 }\n  var ep_square = EMPTY\n  var half_moves = 0\n  var move_number = 1\n  var history = []\n  var header = {}\n  var comments = {}\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION)\n  } else {\n    load(fen)\n  }\n\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    board = new Array(128)\n    kings = { w: EMPTY, b: EMPTY }\n    turn = WHITE\n    castling = { w: 0, b: 0 }\n    ep_square = EMPTY\n    half_moves = 0\n    move_number = 1\n    history = []\n    if (!keep_headers) header = {}\n    comments = {}\n    update_setup(generate_fen())\n  }\n\n  function prune_comments() {\n    var reversed_history = []\n    var current_comments = {}\n    var copy_comment = function (fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen]\n      }\n    }\n    while (history.length > 0) {\n      reversed_history.push(undo_move())\n    }\n    copy_comment(generate_fen())\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop())\n      copy_comment(generate_fen())\n    }\n    comments = current_comments\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION)\n  }\n\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    var tokens = fen.split(/\\s+/)\n    var position = tokens[0]\n    var square = 0\n\n    if (!validate_fen(fen).valid) {\n      return false\n    }\n\n    clear(keep_headers)\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n        square++\n      }\n    }\n\n    turn = tokens[1]\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARE_MAP[tokens[3]]\n    half_moves = parseInt(tokens[4], 10)\n    move_number = parseInt(tokens[5], 10)\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square',\n    }\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/)\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] }\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(parseInt(tokens[5])) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] }\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(parseInt(tokens[4])) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] }\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] }\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] }\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] }\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/')\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] }\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0\n      var previous_was_number = false\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] }\n          }\n          sum_fields += parseInt(rows[i][k], 10)\n          previous_was_number = true\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] }\n          }\n          sum_fields += 1\n          previous_was_number = false\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] }\n      }\n    }\n\n    if (\n      (tokens[3][1] == '3' && tokens[1] == 'w') ||\n      (tokens[3][1] == '6' && tokens[1] == 'b')\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] }\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] }\n  }\n\n  function generate_fen() {\n    var empty = 0\n    var fen = ''\n\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      if (board[i] == null) {\n        empty++\n      } else {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        var color = board[i].color\n        var piece = board[i].type\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== SQUARE_MAP.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    var cflags = ''\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K'\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q'\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k'\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q'\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-'\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1]\n      }\n    }\n    return header\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1'\n      header['FEN'] = fen\n    } else {\n      delete header['SetUp']\n      delete header['FEN']\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARE_MAP[square]]\n    return piece ? { type: piece.type, color: piece.color } : null\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARE_MAP)) {\n      return false\n    }\n\n    var sq = SQUARE_MAP[square]\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type == KING &&\n      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n    ) {\n      return false\n    }\n\n    board[sq] = { type: piece.type, color: piece.color }\n    if (piece.type === KING) {\n      kings[piece.color] = sq\n    }\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  function remove(square) {\n    var piece = get(square)\n    board[SQUARE_MAP[square]] = null\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY\n    }\n\n    update_setup(generate_fen())\n\n    return piece\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type,\n    }\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION\n      move.promotion = promotion\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN\n    }\n    return move\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]))\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags))\n      }\n    }\n\n    var moves = []\n    var us = turn\n    var them = swap_color(us)\n    var second_rank = { b: RANK_7, w: RANK_2 }\n\n    var first_sq = SQUARE_MAP.a8\n    var last_sq = SQUARE_MAP.h1\n    var single_square = false\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== 'undefined' && 'legal' in options\n        ? options.legal\n        : true\n\n    var piece_type =\n      typeof options !== 'undefined' &&\n      'piece' in options &&\n      typeof options.piece === 'string'\n        ? options.piece.toLowerCase()\n        : true\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARE_MAP) {\n        first_sq = last_sq = SQUARE_MAP[options.square]\n        single_square = true\n      } else {\n        /* invalid square */\n        return []\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece == null || piece.color !== us) {\n        continue\n      }\n\n      if (piece.type === PAWN && (piece_type === true || piece_type === PAWN)) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0]\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL)\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1]\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN)\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j]\n          if (square & 0x88) continue\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE)\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n          }\n        }\n      } else if (piece_type === true || piece_type === piece.type) {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j]\n          var square = i\n\n          while (true) {\n            square += offset\n            if (square & 0x88) break\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL)\n            } else {\n              if (board[square].color === us) break\n              add_move(board, moves, i, square, BITS.CAPTURE)\n              break\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (piece_type === true || piece_type === KING) {\n      if (!single_square || last_sq === kings[us]) {\n        /* king-side castling */\n        if (castling[us] & BITS.KSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from + 2\n\n          if (\n            board[castling_from + 1] == null &&\n            board[castling_to] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from + 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n          }\n        }\n\n        /* queen-side castling */\n        if (castling[us] & BITS.QSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from - 2\n\n          if (\n            board[castling_from - 1] == null &&\n            board[castling_from - 2] == null &&\n            board[castling_from - 3] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from - 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n          }\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = []\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i])\n      }\n      undo_move()\n    }\n\n    return legal_moves\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, moves) {\n    var output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        var disambiguator = get_disambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    make_move(move)\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    undo_move()\n\n    return output\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue\n\n      var piece = board[i]\n      var difference = i - square\n      var index = difference + 119\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        var offset = RAYS[index]\n        var j = i + offset\n\n        var blocked = false\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color])\n  }\n\n  function in_check() {\n    return king_attacked(turn)\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0\n  }\n\n  function insufficient_material() {\n    var pieces = {}\n    var bishops = []\n    var num_pieces = 0\n    var sq_color = 0\n\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      sq_color = (sq_color + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color)\n        }\n        num_pieces++\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0\n      var len = bishops.length\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = []\n    var positions = {}\n    var repetition = false\n\n    while (true) {\n      var move = undo_move()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ')\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      if (!moves.length) {\n        break\n      }\n      make_move(moves.pop())\n    }\n\n    return repetition\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number,\n    })\n  }\n\n  function make_move(move) {\n    var us = turn\n    var them = swap_color(us)\n    push(move)\n\n    board[move.to] = board[move.from]\n    board[move.from] = null\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null\n      } else {\n        board[move.to + 16] = null\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us }\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1\n        var castling_from = move.to + 1\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1\n        var castling_from = move.to - 2\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      }\n\n      /* turn off castling */\n      castling[us] = ''\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16\n      } else {\n        ep_square = move.to + 16\n      }\n    } else {\n      ep_square = EMPTY\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0\n    } else {\n      half_moves++\n    }\n\n    if (turn === BLACK) {\n      move_number++\n    }\n    turn = swap_color(turn)\n  }\n\n  function undo_move() {\n    var old = history.pop()\n    if (old == null) {\n      return null\n    }\n\n    var move = old.move\n    kings = old.kings\n    turn = old.turn\n    castling = old.castling\n    ep_square = old.ep_square\n    half_moves = old.half_moves\n    move_number = old.move_number\n\n    var us = turn\n    var them = swap_color(turn)\n\n    board[move.from] = board[move.to]\n    board[move.from].type = move.piece // to undo any promotions\n    board[move.to] = null\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them }\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index\n      if (us === BLACK) {\n        index = move.to - 16\n      } else {\n        index = move.to + 16\n      }\n      board[index] = { type: PAWN, color: them }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1\n        castling_from = move.to - 1\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2\n        castling_from = move.to + 1\n      }\n\n      board[castling_to] = board[castling_from]\n      board[castling_from] = null\n    }\n\n    return move\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    var clean_move = stripped_san(move)\n\n    // the move parsers is a 2-step state\n    for (var parser = 0; parser < 2; parser++) {\n      if (parser == PARSER_SLOPPY) {\n        // only run the sloppy parse if explicitly requested\n        if (!sloppy) {\n          return null\n        }\n\n        // The sloppy parser allows the user to parse non-standard chess\n        // notations. This parser is opt-in (by specifying the\n        // '{ sloppy: true }' setting) and is only run after the Standard\n        // Algebraic Notation (SAN) parser has failed.\n        //\n        // When running the sloppy parser, we'll run a regex to grab the piece,\n        // the to/from square, and an optional promotion piece. This regex will\n        // parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n        // f7f8q, b1c3\n\n        // NOTE: Some positions and moves may be ambiguous when using the\n        // sloppy parser. For example, in this position:\n        // 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1, the move b1c3 may be interpreted\n        // as Nc3 or B1c3 (a disambiguated bishop move). In these cases, the\n        // sloppy parser will default to the most most basic interpretation\n        // (which is b1c3 parsing to Nc3).\n\n        // FIXME: these var's are hoisted into function scope, this will need\n        // to change when switching to const/let\n\n        var overly_disambiguated = false\n\n        var matches = clean_move.match(\n          /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n        )\n        if (matches) {\n          var piece = matches[1]\n          var from = matches[2]\n          var to = matches[3]\n          var promotion = matches[4]\n\n          if (from.length == 1) {\n            overly_disambiguated = true\n          }\n        } else {\n          // The [a-h]?[1-8]? portion of the regex below handles moves that may\n          // be overly disambiguated (e.g. Nge7 is unnecessary and non-standard\n          // when there is one legal knight move to e7). In this case, the value\n          // of 'from' variable will be a rank or file, not a square.\n          var matches = clean_move.match(\n            /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\n          )\n\n          if (matches) {\n            var piece = matches[1]\n            var from = matches[2]\n            var to = matches[3]\n            var promotion = matches[4]\n\n            if (from.length == 1) {\n              var overly_disambiguated = true\n            }\n          }\n        }\n      }\n\n      var piece_type = infer_piece_type(clean_move)\n      var moves = generate_moves({\n        legal: true,\n        piece: piece ? piece : piece_type,\n      })\n\n      for (var i = 0, len = moves.length; i < len; i++) {\n        switch (parser) {\n          case PARSER_STRICT: {\n            if (clean_move === stripped_san(move_to_san(moves[i], moves))) {\n              return moves[i]\n            }\n            break\n          }\n          case PARSER_SLOPPY: {\n            if (matches) {\n              // hand-compare move properties with the results from our sloppy\n              // regex\n              if (\n                (!piece || piece.toLowerCase() == moves[i].piece) &&\n                SQUARE_MAP[from] == moves[i].from &&\n                SQUARE_MAP[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)\n              ) {\n                return moves[i]\n              } else if (overly_disambiguated) {\n                // SPECIAL CASE: we parsed a move string that may have an\n                // unneeded rank/file disambiguator (e.g. Nge7).  The 'from'\n                // variable will\n                var square = algebraic(moves[i].from)\n                if (\n                  (!piece || piece.toLowerCase() == moves[i].piece) &&\n                  SQUARE_MAP[to] == moves[i].to &&\n                  (from == square[0] || from == square[1]) &&\n                  (!promotion || promotion.toLowerCase() == moves[i].promotion)\n                ) {\n                  return moves[i]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return null\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move)\n    move.san = move_to_san(move, generate_moves({ legal: true }))\n    move.to = algebraic(move.to)\n    move.from = algebraic(move.from)\n\n    var flags = ''\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag]\n      }\n    }\n    move.flags = flags\n\n    return move\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false })\n    var nodes = 0\n    var color = turn\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1)\n          nodes += child_nodes\n        } else {\n          nodes++\n        }\n      }\n      undo_move()\n    }\n\n    return nodes\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function (fen) {\n      return load(fen)\n    },\n\n    reset: function () {\n      return reset()\n    },\n\n    moves: function (options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options)\n      var moves = []\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== 'undefined' &&\n          'verbose' in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]))\n        } else {\n          moves.push(\n            move_to_san(ugly_moves[i], generate_moves({ legal: true }))\n          )\n        }\n      }\n\n      return moves\n    },\n\n    in_check: function () {\n      return in_check()\n    },\n\n    in_checkmate: function () {\n      return in_checkmate()\n    },\n\n    in_stalemate: function () {\n      return in_stalemate()\n    },\n\n    in_draw: function () {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    insufficient_material: function () {\n      return insufficient_material()\n    },\n\n    in_threefold_repetition: function () {\n      return in_threefold_repetition()\n    },\n\n    game_over: function () {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    validate_fen: function (fen) {\n      return validate_fen(fen)\n    },\n\n    fen: function () {\n      return generate_fen()\n    },\n\n    board: function () {\n      var output = [],\n        row = []\n\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        if (board[i] == null) {\n          row.push(null)\n        } else {\n          row.push({\n            square: algebraic(i),\n            type: board[i].type,\n            color: board[i].color,\n          })\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row)\n          row = []\n          i += 8\n        }\n      }\n\n      return output\n    },\n\n    pgn: function (options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\n'\n      var max_width =\n        typeof options === 'object' && typeof options.max_width === 'number'\n          ? options.max_width\n          : 0\n      var result = []\n      var header_exists = false\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n        header_exists = true\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline)\n      }\n\n      var append_comment = function (move_string) {\n        var comment = comments[generate_fen()]\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : ''\n          move_string = `${move_string}${delimiter}{${comment}}`\n        }\n        return move_string\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = []\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      var moves = []\n      var move_string = ''\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''))\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string)\n        var move = reversed_history.pop()\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...'\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string)\n          }\n          move_string = move_number + '.'\n        }\n\n        move_string =\n          move_string + ' ' + move_to_san(move, generate_moves({ legal: true }))\n        make_move(move)\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string))\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result)\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ')\n      }\n\n      var strip = function () {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop()\n          return true\n        }\n        return false\n      }\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function (width, move) {\n        for (var token of move.split(' ')) {\n          if (!token) {\n            continue\n          }\n          if (width + token.length > max_width) {\n            while (strip()) {\n              width--\n            }\n            result.push(newline)\n            width = 0\n          }\n          result.push(token)\n          width += token.length\n          result.push(' ')\n          width++\n        }\n        if (strip()) {\n          width--\n        }\n        return width\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i])\n            continue\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop()\n          }\n\n          result.push(newline)\n          current_width = 0\n        } else if (i !== 0) {\n          result.push(' ')\n          current_width++\n        }\n        result.push(moves[i])\n        current_width += moves[i].length\n      }\n\n      return result.join('')\n    },\n\n    load_pgn: function (pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\')\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === 'object' &&\n          typeof options.newline_char === 'string'\n            ? options.newline_char\n            : '\\r?\\n'\n        var header_obj = {}\n        var headers = header.split(new RegExp(mask(newline_char)))\n        var key = ''\n        var value = ''\n\n        for (var i = 0; i < headers.length; i++) {\n          var regex = /^\\s*\\[([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n          key = headers[i].replace(regex, '$1')\n          value = headers[i].replace(regex, '$2')\n          if (trim(key).length > 0) {\n            header_obj[key] = value\n          }\n        }\n\n        return header_obj\n      }\n\n      // strip whitespace from head/tail of PGN block\n      pgn = pgn.trim()\n\n      var newline_char =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\r?\\n'\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\s*\\r?\\n){2}/\n      var header_regex = new RegExp(\n        '^(\\\\[((?:' +\n          mask(newline_char) +\n          ')|.)*\\\\])' +\n          '(?:\\\\s*' +\n          mask(newline_char) +\n          '){2}'\n      )\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn)\n        ? header_regex.exec(pgn)[1]\n        : ''\n\n      // Put the board in the starting position\n      reset()\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options)\n      var fen = ''\n\n      for (var key in headers) {\n        // check to see user is including fen (possibly with wrong tag case)\n        if (key.toLowerCase() === 'fen') {\n          fen = headers[key]\n        }\n        set_header([key, headers[key]])\n      }\n\n      /* sloppy parser should attempt to load a fen tag, even if it's\n       * the wrong case and doesn't include a corresponding [SetUp \"1\"] tag */\n      if (sloppy) {\n        if (fen) {\n          if (!load(fen, true)) {\n            return false\n          }\n        }\n      } else {\n        /* strict parser - load the starting position indicated by [Setup '1']\n         * and [FEN position] */\n        if (headers['SetUp'] === '1') {\n          if (!('FEN' in headers && load(headers['FEN'], true))) {\n            // second argument to load: don't clear the headers\n            return false\n          }\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function (string) {\n        return Array.from(string)\n          .map(function (c) {\n            /* encodeURI doesn't transform most ASCII characters,\n             * so we handle these ourselves */\n            return c.charCodeAt(0) < 128\n              ? c.charCodeAt(0).toString(16)\n              : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\n          })\n          .join('')\n      }\n\n      var from_hex = function (string) {\n        return string.length == 0\n          ? ''\n          : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\n      }\n\n      var encode_comment = function (string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\n        return `{${to_hex(string.slice(1, string.length - 1))}}`\n      }\n\n      var decode_comment = function (string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1))\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, '')\n        .replace(\n          /* encode comments so they don't get deleted below */\n          new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\n          function (match, bracket, semicolon) {\n            return bracket !== undefined\n              ? encode_comment(bracket)\n              : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\n          }\n        )\n        .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '')\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '')\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '')\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/))\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',')\n      var move = ''\n\n      var result = ''\n\n      for (var half_move = 0; half_move < moves.length; half_move++) {\n        var comment = decode_comment(moves[half_move])\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment\n          continue\n        }\n\n        move = move_from_san(moves[half_move], sloppy)\n\n        /* invalid move */\n        if (move == null) {\n          /* was the move an end of game marker */\n          if (TERMINATION_MARKERS.indexOf(moves[half_move]) > -1) {\n            result = moves[half_move]\n          } else {\n            return false\n          }\n        } else {\n          /* reset the end of game marker if making a valid move */\n          result = ''\n          make_move(move)\n        }\n      }\n\n      /* Per section 8.2.6 of the PGN spec, the Result tag pair must match\n       * match the termination marker. Only do this when headers are present,\n       * but the result tag is missing\n       */\n      if (result && Object.keys(header).length && !header['Result']) {\n        set_header(['Result', result])\n      }\n\n      return true\n    },\n\n    header: function () {\n      return set_header(arguments)\n    },\n\n    turn: function () {\n      return turn\n    },\n\n    move: function (move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      var move_obj = null\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy)\n      } else if (typeof move === 'object') {\n        var moves = generate_moves()\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i]\n            break\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj)\n\n      make_move(move_obj)\n\n      return pretty_move\n    },\n\n    undo: function () {\n      var move = undo_move()\n      return move ? make_pretty(move) : null\n    },\n\n    clear: function () {\n      return clear()\n    },\n\n    put: function (piece, square) {\n      return put(piece, square)\n    },\n\n    get: function (square) {\n      return get(square)\n    },\n\n    ascii() {\n      var s = '   +------------------------+\\n'\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        /* display the rank */\n        if (file(i) === 0) {\n          s += ' ' + '87654321'[rank(i)] + ' |'\n        }\n\n        /* empty piece */\n        if (board[i] == null) {\n          s += ' . '\n        } else {\n          var piece = board[i].type\n          var color = board[i].color\n          var symbol =\n            color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n          s += ' ' + symbol + ' '\n        }\n\n        if ((i + 1) & 0x88) {\n          s += '|\\n'\n          i += 8\n        }\n      }\n      s += '   +------------------------+\\n'\n      s += '     a  b  c  d  e  f  g  h'\n\n      return s\n    },\n\n    remove: function (square) {\n      return remove(square)\n    },\n\n    perft: function (depth) {\n      return perft(depth)\n    },\n\n    square_color: function (square) {\n      if (square in SQUARE_MAP) {\n        var sq_0x88 = SQUARE_MAP[square]\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n      }\n\n      return null\n    },\n\n    history: function (options) {\n      var reversed_history = []\n      var move_history = []\n      var verbose =\n        typeof options !== 'undefined' &&\n        'verbose' in options &&\n        options.verbose\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n        if (verbose) {\n          move_history.push(make_pretty(move))\n        } else {\n          move_history.push(move_to_san(move, generate_moves({ legal: true })))\n        }\n        make_move(move)\n      }\n\n      return move_history\n    },\n\n    get_comment: function () {\n      return comments[generate_fen()]\n    },\n\n    set_comment: function (comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']')\n    },\n\n    delete_comment: function () {\n      var comment = comments[generate_fen()]\n      delete comments[generate_fen()]\n      return comment\n    },\n\n    get_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        return { fen: fen, comment: comments[fen] }\n      })\n    },\n\n    delete_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        var comment = comments[fen]\n        delete comments[fen]\n        return { fen: fen, comment: comment }\n      })\n    },\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAG,cAAc;AAE9B,MAAMC,gBAAgB,GACpB,0DAA0D;AAE5D,MAAMC,mBAAmB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC;AAE1D,MAAMC,YAAY,GAAG;EACnBC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACnBC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;AACxB,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACvCH,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACrBI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;EACnBC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;EACrCC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACtC,CAAC;;AAED;AACA,MAAMC,OAAO,GAAG,CACd,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAG,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,CAC/C;;AAED;AACA,MAAMC,IAAI,GAAG,CACV,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}